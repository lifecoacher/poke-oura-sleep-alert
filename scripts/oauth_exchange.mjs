// scripts/oauth_exchange.mjs
// Optional OAuth 2.0 Authorization Code flow for Oura
// Use this if you prefer OAuth tokens over Personal Access Tokens (PAT)

import http from 'http';
import { URL } from 'url';
import dotenv from 'dotenv';
import fs from 'fs';

dotenv.config();

const CLIENT_ID = process.env.OURA_CLIENT_ID;
const CLIENT_SECRET = process.env.OURA_CLIENT_SECRET;
const REDIRECT_URI = process.env.OURA_REDIRECT_URI || 'http://localhost:8787/callback';
const PORT = new URL(REDIRECT_URI).port || 8787;

if (!CLIENT_ID || !CLIENT_SECRET) {
  console.error('Error: OURA_CLIENT_ID and OURA_CLIENT_SECRET must be set in .env');
  console.error('\nTo get these:');
  console.error('1. Visit https://cloud.ouraring.com/oauth/applications');
  console.error('2. Create a new OAuth application');
  console.error('3. Set redirect URI to:', REDIRECT_URI);
  console.error('4. Copy CLIENT_ID and CLIENT_SECRET to .env');
  process.exit(1);
}

const SCOPE = 'daily';
const AUTH_URL = `https://cloud.ouraring.com/oauth/authorize?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(REDIRECT_URI)}&scope=${SCOPE}`;

console.log('=== Oura OAuth 2.0 Token Exchange ===\n');
console.log('Step 1: Authorize this app');
console.log('\nOpen this URL in your browser:\n');
console.log(AUTH_URL);
console.log('\n(If the browser doesn\'t open automatically, copy the URL above)\n');

// Try to open browser automatically (works on most systems)
try {
  const { exec } = await import('child_process');
  const command = process.platform === 'darwin' ? 'open' : process.platform === 'win32' ? 'start' : 'xdg-open';
  exec(`${command} "${AUTH_URL}"`);
} catch (err) {
  // Silently fail if we can't open browser
}

console.log('Step 2: Waiting for callback...');
console.log(`(Local server listening on port ${PORT})\n`);

const server = http.createServer(async (req, res) => {
  const url = new URL(req.url, REDIRECT_URI);
  const code = url.searchParams.get('code');
  const error = url.searchParams.get('error');

  if (error) {
    res.writeHead(400, { 'Content-Type': 'text/html' });
    res.end(`<h1>Authorization Failed</h1><p>Error: ${error}</p>`);
    console.error('\nAuthorization failed:', error);
    server.close();
    process.exit(1);
  }

  if (!code) {
    res.writeHead(200, { 'Content-Type': 'text/html' });
    res.end('<h1>Oura OAuth</h1><p>Waiting for authorization...</p>');
    return;
  }

  console.log('\nStep 3: Exchanging authorization code for tokens...');

  try {
    const tokenResponse = await fetch('https://api.ouraring.com/oauth/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        grant_type: 'authorization_code',
        code: code,
        redirect_uri: REDIRECT_URI,
        client_id: CLIENT_ID,
        client_secret: CLIENT_SECRET,
      }),
    });

    if (!tokenResponse.ok) {
      const errorText = await tokenResponse.text();
      throw new Error(`Token exchange failed: ${tokenResponse.status} ${errorText}`);
    }

    const tokens = await tokenResponse.json();

    res.writeHead(200, { 'Content-Type': 'text/html' });
    res.end(`
      <h1>✅ Success!</h1>
      <p>Tokens obtained successfully. You can close this window.</p>
      <p>Check the terminal for your tokens.</p>
    `);

    console.log('\n✅ OAuth flow completed successfully!\n');
    console.log('Your tokens:\n');
    console.log('Access Token (use as OURA_TOKEN):');
    console.log(tokens.access_token);
    console.log('');
    console.log('Refresh Token (for future token refresh):');
    console.log(tokens.refresh_token);
    console.log('');
    console.log('Expires in:', tokens.expires_in, 'seconds (', Math.floor(tokens.expires_in / 3600), 'hours)');
    console.log('');

    // Optionally append to .env file
    console.log('To use these tokens, add them to your .env file:\n');
    console.log('OURA_TOKEN=' + tokens.access_token);
    console.log('OURA_REFRESH_TOKEN=' + tokens.refresh_token);
    console.log('');

    const appendToEnv = `
# OAuth tokens generated by scripts/oauth_exchange.mjs on ${new Date().toISOString()}
OURA_TOKEN=${tokens.access_token}
OURA_REFRESH_TOKEN=${tokens.refresh_token}
`;

    console.log('⚠️  WARNING: Never commit these tokens to version control!\n');
    console.log('Would you like to append these to .env? (Ctrl+C to skip)');
    console.log('Note: .env is already in .gitignore, but be careful not to share it.\n');

    // Give user 5 seconds to cancel before auto-appending
    setTimeout(() => {
      fs.appendFileSync('.env', appendToEnv);
      console.log('\u2713 Tokens appended to .env file.');
      server.close();
    }, 5000);

  } catch (err) {
    res.writeHead(500, { 'Content-Type': 'text/html' });
    res.end(`<h1>Error</h1><p>${err.message}</p>`);
    console.error('\nError:', err.message);
    server.close();
    process.exit(1);
  }
});

server.listen(PORT, () => {
  console.log(`Callback server running at ${REDIRECT_URI}`);
});

// Timeout after 5 minutes
setTimeout(() => {
  console.log('\nTimeout: No authorization code received after 5 minutes.');
  server.close();
  process.exit(1);
}, 300000);
